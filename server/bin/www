#!/usr/bin/env node
if (process.env.env !== 'development'){
    require('newrelic');
}
process.on('unhandledRejection', (reason, p) => {
    console.log('Unhandled Rejection at: Promise ', p, ' reason: ', reason);
});

process.on('uncaughtException', function (exception) {
    console.log('Uncaught Exception:');
    console.log(exception);
});

process.on('beforeExit', function () {
    console.log('Exiting for an Unknown Reason');
});
let conf = require('../conf/config');
let db = require('../lib/db');
db.connect(conf.dbConfig.url, ()=> {
    let app = require('../app');
    let log = require('../lib/logger');
    let startup = require('../lib/startUp');
    let monitorRunner = require('../lib/monitorRunner');
    let server;
    app.set('env', process.env.env);
    console.log('SSL Enabled: ' + db.dbConfig.ssl.enabled);

    if (process.env.env !== 'development' && db.dbConfig.ssl.enabled){
        let fs = require('fs');
        let sslConfig = {
            key: fs.readFileSync('./server/ssl/private.key'),
            cert: fs.readFileSync('./server/ssl/certificate.crt'),
            ca: fs.readFileSync ('./server/ssl/bundle.ca-bundle')
        };
        let port = normalizePort(db.dbConfig.ssl.port || '8443');
        app.set('port', port);
        let https = require('https');
        server = https.createServer(sslConfig, app).listen(port);
        console.log('Enabling SSL on port: ' + app.get('sslPort'));
        global.httpProtocol = 'https';
    } else {
        let http = require('http');
        let port = normalizePort(db.dbConfig.serverPort || '8080');
        app.set('port', port);
        server = http.createServer(app).listen(port);
        global.httpProtocol = 'http';
    }
    global.port = app.get('port');
    server.on('error', onError);
    server.on('listening', onListening);

    try {
        app.set('io', require('socket.io').listen(server));
        app.get('io').sockets.on('connection', require('../routes/socket'));
    } catch(e){
        log.error(e);
    }

    /**
   * Normalize a port into a number, string, or false.
   */


    ['SIGINT', 'SIGTERM', 'SIGQUIT', 'SIGKILL', 'SIGABRT', 'SIGTERM']
        .forEach(signal =>{
            try {
                process.on(signal, shutdown);
            } catch(e) {
                log.info (signal + ' is not an available signal');
            }
        });

    function shutdown() {
        console.log('Shutting Down as Gracefully as possible...');
        monitorRunner.stopAllMonitors(()=> {
            log.debug('Monitors Halted');
            process.exit();
        });
    }

    function normalizePort(val) {
        let port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
   * Event listener for HTTP server "error" event.
   */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
        }
    }

    /**
   * Event listener for HTTP server "listening" event.
   */

    function onListening() {
        let addr = server.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        log.info('[ \x1B[36m'+app.get('env')+'\x1B[39m  ] : Listening on \x1B[36m' + bind + '\x1B[39m');
        startup.startup();
    }
});
